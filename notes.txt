1970
	Apple
		I / IIe
		Lisa / Macintosh (Primo pobre)
		Next Step (Unix) ~> Mac OS 9 ~> BeOS
			1983 - Stepstone(C+Smalltalk) = Objective C
			Project Builder ~> Xcode
			Interface Builder ~> Xcode
	IBM PC OS/2 Presentation Manager (Windows 3.1)
	Microsoft
	Xerox Parc Alto
		Mouse
		GUI
		Ethernet
		Laser

	Apple ~> Pepsi


2007
	Google Android
	iPhone OS (adaptado do Mac OS)
		Apps em HTML+CSS+JS

2008
	iPad
	iPhone OS SDK
	iOS = Único SO para dispositivos móveis

----------------------------------------------
iOS
	iPhone (iPod)
	iPad (mini)
	Apple TV

Universal (se vire para adaptar)

----------------------------------------------
malloc()/calloc()/realloc()
free()

	> Reference Counting
	> Automatic Reference Counting
		> em tempo de compilação
		> coloca as mensagens Release (free)
		> caso o programador esqueça

----------------------------------------------
iPhone Simulator
	~> iOS usa binário ARM 7
	~> simulador usa binário x86
	~> Sem Camera
	~> GPS limitado
	~> Sem múltiplos toques
----------------------------------------------
Níveis de Conta Apple


Grátis
	- Download Xcode (última versão apenas)
	- Vídeos antigos (Worldwide Developers Conference)
Standard
	- Conta PF ou PJ
	- Download iOS beta
	- Download Xcode (todas as versões)
	- publicar app no iOS
	- vídeos recentes de apresentações
	- 100 dispositivos podem usar seus apps sem estarem na App Store
		- Mesmo que você apague um device,
		a contagem é atualizada apenas na
		renovação da assinatura.
	- 99/mês
Enterprise
	- mesmos benefícios da Standard (100 UDIDs tb)
	- permite gerenciamento de desenvolvedores e autorização
	- Ad-Hoc
	- 299/ano
----------------------------------------------
Conceitos
	Xcode = Integrated Development Environment (IDE)
	- Editores (código e visual)
	- Compilador
	- Debugger
	- Não é RAD (Rapid Application Development)

	Toda View tem um Controller, por isso
	se chama ViewController

	.h (header) define
	.m (messages) implementa
	.xib (XML Interface Builder)
	  .nib (NextStep Interface Builder)

	[View] ---- [ View Controller ]
	   |                 |
	   |                 |
	   ---[View]---------|


	Ligar View com ViewController:
	  > xib
	  > segurar Ctrl
	  > clicar no botão
	  > arrastar para o item File's Owner

	Visualizar conexões da View
	  > xib
	  > botão direito na View
	  > obs: sempre desconectar antes de apagar view


	Enviar Mensagem em Objective-C
	[alvo seletor]


	View = Tudo que está na tela
	Action = Liga view ao código
	Outlet = Liga código à view

	~
	Não há construtor no Objective C
	Existe o Init, um "construtor que tem que ser chamado manualmente"
	str = [NSString alloc];
	str = [str init];

	// mas as pessoas esquecem de inicializar
	str = [[NSString alloc] init];

	// mas tem 1 atalho
	// mas nao dá para passar parâmetros
	str = [NSString new];

	// por isso tem essa forma
	str = [[NSString alloc] initWithCString:"Teste"];

	// mas uma Factory
	[NSString stringWithCString:"teste"];

	~
	Design Pattern
	1. Resolve problema recorrente
	2. Solução Padronizada
	3. Nome // Para poupar ruídos
	4. Dicas no Código // Para indicar o uso de um Design Pattern

	~
	Memória
	Igual ao Java, com Pilha p/ variáveis com nome
	E Heap para armazenar objetos
	Para lembrar: quando se tem nome, é armazenada na Pilha;

	Mandrakisse:
	NSString*str1 = @"Teste";
	NSString*str2 = @"Teste";
	// Objective C cria 2 referências para um mesmo Objeto
	// Para otimizar, mas se uma delas for alterada
	// Outro objeto é criado e a respectiva referência é atualizada

	~
	Interpolação (Format String)
	Não há concatenação no Objective C

	// Há 3 strings abaixo (muitos objetos)
	NSString*sql = @"Select *";
	sql = [NSString stringWithFormat @"%@ from", sql];

	// Alternativa (Mutable String)
	// herda de NSString
	// equivalente ao StringBuilder/StringBuffer no Java
	NSMutableString*sql = [[NSMutableString alloc] init];
	[sql appendString:@"select *"];
	[sql appendFormat:@"%from %@",tabela];

	// description == toString()
	NSLog(@"comando sql: %@", [sql description]);

	~
	Mensagem VS Método
	1. Mensagens renderizadas em tempo de execução

	~
	CAST
	[moldar]
	[gesso]

	~
	Novo App (Empty Project)

	Supporting Files > pch (pre compiled headers)
	podem ser usados em qualquer fonte

	~
	Preâmbulo do App
	1) iOS carrega APP
	2) APP chama main()
	3) main() chama AppDelegate
	4) iOS interage diretamente com o AppDelegate
	5) Mostrar View

	[iOS]---(1)---[App]
          |             |
	  |             | (2) main()
          |             | (3) 
         (4)-------[AppDelegate]--(5)--[View]--[N views]

	Lembra que tudo na tela é uma view? (botão, label, etc)

	~
	Push Notification
	- Vem do servidor da Apple
	- App tem 5 segundos para tomar ação
	- App não é iniciado até o usuário tocar


	~
	Entender método

	public boolean applicationDidFinishLaunchingWithOptions (UIApplication application, Map launchOptions)

	- (BOOL) application (UIApplication *) application didFinishLaunchingWithOptions (NSDictionary *) launchOptions
		> recebe 2 parâmetros
			> (UIApplication *) application
			> (NSDictionary *) launchOptions
		> nome do método: application:DidFinishLaunchingWithOptions:

	[alvo seletor]
	[alvo application:x didFinishLaunchingWithOptions:y]
	// Parâmetros mais legível

	~
	Include VS Import

	include = require
	import = require_once

	Valor entre aspas duplas = verifica em sua classe
	Valor entre "<" e ">"

	~
	Não há forma de forçar herança no Objective C
	No NSObject há o método alloc

	~
	Modelar Objetos

	1. O que é?
		> Contato
		> (herda de) Objeto
	2. O que tem?
		> nome
		> telefone
		> email
		> endereço
		> site
	3. O que faz?
		> description (toString)


	~
	Truques da Herança e Polimorfismo

	// NSString *nome;
	contato.nome = [[NSMutableString alloc] init];
	// Mutable String altera a NSString


	~
	nil = null
	Mensagens para nil são ignoradas

	~
	Injeção de Dependências (IoC)
	App Delegate --> setContatos --> Lista Contatos
		--> setContatos --> contatos

	~
	Ciclo de vida das Views

	- init ) 1
	- viewDidLoad ) 1
	- viewWillAppear ) X
	- viewDidAppear ) X
	- viewWillDisappear ) X
	- ViewDidDisappear ) X
	- dealloc ) 1

	~
	Serialização
	- NSKeyedArchiver e NSKeyedUnarchiever

	[NSKeyedArchiver] ----- (encode) --> NSMutableArray
						  | 
						  | 
					       (encode)
						  | 
						  v
						Contato
						  | 
						  | 
					       (encode)
						  | 
						  v 
					       NSString 


	~
	Interface é chamada de Protocolo no Objective C (@protocol)
	@interface Contato:NSObject <NSCoding,Blabla (…)>


	~
	Permissões Filesystem
	> Ler na pasta do App
	> Ler/Escrever na pasta App/Documents
	NSArray * dirs = NSSearchPathForDirectoriesInDomains:(NSDocumentDirectory *)dir

	1) Cocoa Touch
	2) Media Layer
	3) Core Services
	4) Core OS

	Operações Permitidas caso a App vá para Backaground
	- VoIP
	- GPS
	- Download
	  > NewSStand
	- Audio

	Arquivos do Simulador:
	~/Library/Application Support/iPhone Simulator/6.1/Applications/

	~
	Organizar Massive View Controller (MVC)
	#pragma mark -
	#pragma mark Ciclo de Vida

	~
	i18n (chamado de Localização)
	- traduzir xib
	- traduzir imagem
	- traduzir strings

	~
	Modal VS Push

	Push empurra view para fora da tela
	Antônimo = Pop

	~
	Custom Init
	[[FormVC alloc] initWithContato:contato]
	Vantagem: localizar Callers!

	~
	Data Source = tela
	Delegate = eventos

	~
	App Busao SP

	~
	Delegate manda fazer e pega de volta
	FormControllerDelegate

	~
	Factory
	NSString stringWithFormat
	NSIndexPath indexPathForRow

	~
	Core Graphics Rect (CGRect)

	~
	init > tela não está pronta
	viewDidLoad > executa 1x
	viewDidAppear > executa sempre

	~
	[super initWithStyle:UITableView...

	~
	Clique longo (2 momentos)
	> inicio
	> fim

	Final de lista (Objective C)
	@"Ligar", nil
	> passar nil

	~
	C é mais rápido que Objective C
	> Só é necessário o uso de "*"
	>> para variáveis que referenciem um objeto
	>> que herda de NSObject
	>>> CGPoint = struct do C
	>>> (Android = Float[])

	~
	CGPoint recebe View e por coordenadas X/Y
	Consegue retornar um IndexPath

	~
	ponto.x += 3
	Não altera o objeto
	ponto.x está na Pilha e não Heap

	~
	ActionSheet
	> menu modal
	> canto inferior

	~
	Acessar APP e APPDelegate
	[UIApplication sharedApplication]
	[[UIApplication sharedApplication] delegate]

	// Máscara de Bits (tel:, sms:, http:)
	NSString url = [NSString stringWithFormat:@"tel:%@", self.contato]
	[[UIApplication sharedApplication] openURL:[NSURL URLWithString:url]]

	~
	Qualificação Objective C
	> Objective C Category
	>> Marota
	>> NSString

	~
	Email
	MFMailComposerViewController
	>> Validar se o usuário possui conta de e-mail cadastrada

	~
	UIImaginePickerController
	>> tirar foto OU escolher da biblioteca
	1) Verificar se há uma Câmera
	if(
		[
			UIImagePickerController 
		isServiceTypeAvailable:UIImagePickerControllerSourceTypeCamera
		]
	)
	>>> UIImagePickerController * picker = [UIImagePickerController new];
	>>> picker.sourceType = UIImagePickerControllerSourceTypeCamera;
	>>> picker.sourceType = UIImagePickerControllerSourcePhotoLibrary;
	>>> picker.allowsEditing = YES;
	>>> picker delegate = self;
	>>> [self presentViewController:picker animated:YES completion:nil];
	>>>>> COMMAND + SHIFT + O
	>>>>> UIImagePickerController
	>>>>> @property delegate
	>>>>> <UINavigationControllerDelegate, UIImagePickerControllerDelegate>
	>>>>> [self dismissViewControllerAnimated:YES completion:nil];

	~
	[self presentViewController.picker animated:YES completion:^{
		callback code
	}];

	~ ASLR
	~ Cookie Web View
	~ OAuth mobile
	~ Conf WebView
----------------------------------------------
Atalhos
	Aba Direita COMMAND+OPTIONS+{0,1,2,3,4,..}
	Gerar Build COMMAND+B
	Executar Build COMMAND+R
	Log COMMAND+SHIFT+Y
	Mostrar Editor COMMAND+OPTIONS+ENTER
	Repositório COMMAND+SHIFT+2
	Novo item COMMAND+N

	Tab
	COMMAND + T
	COMMAND + W
	COMMAND + {
	COMMAND + }

	SHIFT+COMMAND+O Buscar Classes
	ESC ou Ctrl + Espaço
----------------------------------------------
Human Interface Guideline (HIG)
developer.apple.com
	/ios
	/downloads
Cocopods (like a Maven)
Google Group [self SP]
iOS Table Views
App Busao SP
http://raywenderlich.com
Effective Objective C
Learn Cocoa Touch for iOS
Beginning iOS Game Development
Alfred